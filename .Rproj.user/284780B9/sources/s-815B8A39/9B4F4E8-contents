---
title: "Congaree Big Trees"
author: "Carter Allen"
date: "1/28/2018"
output: html_document
---

## Introduction

This post is an expansion on a term project completed for SCHC 312 at the University of South Carolina during the Fall 2016 semester taught by [Dr. John Grego](http://people.stat.sc.edu/grego/). The project involved validating a big-tree database and then subsequently mapping the results. Ultimately though, it left us with more questions than answers. 

The Congaree National Park is South Carolina's only National Park. It is known most prominently for its abundance of massive trees that are also some of the oldest preserved individuals of their species in any floodplain ecosystem. There are a few environmental and historical reasons that have allowed for this. A temperate climate and nutrient rich soil provide an environment that is conducive to growth, and the historical inaccessibility of the park to loggers due to frequent floods from the Congaree River and an oppressive mosquito presence have preserved some of the park's most impressive specimens. 

Such favorable conditions have earned the Congaree [distinction](http://www.americanforests.org/magazine/article/congaree-where-the-trees-are-still-tall/) for its concentration of [champion trees](https://discoversouthcarolina.com/articles/champion-trees-are-star-attraction-at-congaree-national-park), or a tree judged by the National Parks Service for being the most impressive of its species according to a standardized [criteria](https://www.nps.gov/cong/planyourvisit/upload/Big%20Tree%20Brochure.pdf).

While champion trees serve as a major attraction for the Congaree National Park, identifying and regularly verifying the park's resident champions is no easy task. Like any other tree, a champion is prone to falling over during storms (or in some cases, growing significantly since the last survey), so the park's champion tree database must be regularly updated. The park's [Frank Henning](https://www.nps.gov/cong/learn/management/staffandoffices.htm) has curated a sizable [database](https://raw.githubusercontent.com/carter-allen/CongareeTrees/master/cong_trees.csv), that is the product of the efforts of volunteers, researches, students, and park staff. 

At the end of the semester, we had created a [map](https://fusiontables.google.com/DataSource?docid=1sWWw8MbvTXVNxhhkkEytiTlf9WkapKCRtQRhsypb#map:id=5) of the trees in this database using Google Fusion Tables. We had chosen to use Fusion Tables because our date were already in a Google Sheet, but I had always intended to reproduce the map in R and do some further analysis. 

## Champion Tree Mapping

### Setup

Since I want to retain the interactive functionality of the original map, I'll use the [leaflet](https://rstudio.github.io/leaflet/) package for mapping.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,cache = TRUE,warning = FALSE,message = FALSE)
library(tidyverse)
library(maps)
library(mapdata)
library(leaflet)
library(htmltools)
library(knitr)
library(plotly)
```

```{r, include = FALSE}
identify_type <- function(a)
{
  if(grepl("pine",a,ignore.case = TRUE))
  {
    return("pine")
  }
  else if(grepl("cypress",a,ignore.case = TRUE))
  {
    return("cypress")
  }
  else if(grepl("sweetgum",a,ignore.case = TRUE))
  {
    return("sweetgum")
  }
  else if(grepl("oak",a,ignore.case = TRUE))
  {
    return("oak")
  }
  else
  {
    return("other")
  }
}
```

```{r, include = FALSE}
identify_types <- function(avec)
{
  len = length(avec)
  b = avec
  for(i in 1:len)
  {
    b[i] = identify_type(avec[i])
  }
  return(b)
}
```

First, I'll read in the champion tree data set and perform some minor cleaning and manipulation steps (the file is already relatively easy to work with).

```{r}
cong <- read_csv("https://raw.githubusercontent.com/carter-allen/CongareeTrees/master/cong_trees.csv") %>% 
  mutate(lat = as.numeric(Latitude_NAD83),
         lon = as.numeric(Longitude_NAD83),
         type = identify_types(Common_Nam),
         Circumfere = as.numeric(Circumfere))
```

Note that the `identify_types()` function is defined (but not shown for aesthetic purposes) in this document to take in the common name of a certain tree and return a simple category that will be used for mapping. To illustrate: 

```{r}
identify_types(c("Red oak","Baldcypress","Loblolly Pine","A mystery tree"))
```

```{r, include = FALSE}
tree_ht = 60
tree_wd = 50
pine_icon <- makeIcon(iconUrl = "http://catalogue.accasoftware.com/img/Prodotti/15491/PREVIEW/pinus-taeda-loblolly-pine.1.750x527-1_1506495942.PNG",
                      iconWidth = tree_ht, 
                      iconHeight = tree_wd,
                      iconAnchorX = tree_wd/2,
                      iconAnchorY = tree_ht-5,
                      popupAnchorX = tree_wd/2,
                      popupAnchorY = tree_ht)

cyp_icon <- makeIcon(iconUrl = "https://vignette.wikia.nocookie.net/fragmented-game/images/4/4b/BaldCypress.png/revision/latest?cb=20160524073937")

sweetgum_icon <- makeIcon(iconUrl = "https://i.pinimg.com/originals/7a/1d/c1/7a1dc1829592fd5c76293935b967cccc.png")

oak_icon <- makeIcon(iconUrl = "https://vignette.wikia.nocookie.net/tome-of-the-unknown/images/2/26/Oak_Tree_0.png/revision/latest?cb=20160814022906")

other_icon <- makeIcon(iconUrl = "http://ostvigtree.com/wp-content/uploads/2017/03/tree-cutting-services.png")

tree_icons <- iconList(
  pine = makeIcon(iconUrl = "http://catalogue.accasoftware.com/img/Prodotti/15491/PREVIEW/pinus-taeda-loblolly-pine.1.750x527-1_1506495942.PNG",
                      iconWidth = tree_ht+10, 
                      iconHeight = tree_wd+20,
                      iconAnchorX = tree_wd/2,
                      iconAnchorY = tree_ht-5,
                      popupAnchorX = tree_wd/2,
                      popupAnchorY = tree_ht),
  cypress = makeIcon(iconUrl = "https://vignette.wikia.nocookie.net/fragmented-game/images/4/4b/BaldCypress.png/revision/latest?cb=20160524073937",
                     iconWidth = tree_ht, 
                      iconHeight = tree_wd,
                      iconAnchorX = tree_wd/2,
                      iconAnchorY = tree_ht-5,
                      popupAnchorX = tree_wd/2,
                      popupAnchorY = tree_ht),
  sweetgum = makeIcon(iconUrl = "https://i.pinimg.com/originals/7a/1d/c1/7a1dc1829592fd5c76293935b967cccc.png",
                      iconWidth = tree_ht, 
                      iconHeight = tree_wd,
                      iconAnchorX = tree_wd/2,
                      iconAnchorY = tree_ht-5,
                      popupAnchorX = tree_wd/2,
                      popupAnchorY = tree_ht),
  oak = makeIcon(iconUrl = "https://vignette.wikia.nocookie.net/tome-of-the-unknown/images/2/26/Oak_Tree_0.png/revision/latest?cb=20160814022906",
                 iconWidth = tree_ht-5, 
                      iconHeight = tree_wd-5,
                      iconAnchorX = tree_wd/2,
                      iconAnchorY = tree_ht-5,
                      popupAnchorX = tree_wd/2,
                      popupAnchorY = tree_ht),
  other = makeIcon(iconUrl = "http://ostvigtree.com/wp-content/uploads/2017/03/tree-cutting-services.png",
                   iconWidth = tree_ht-20, 
                      iconHeight = tree_wd-20,
                      iconAnchorX = tree_wd/2,
                      iconAnchorY = tree_ht-20,
                      popupAnchorX = tree_wd/2,
                      popupAnchorY = tree_ht)
)
```

The next step was to find images online to serve as icons for `leaflet::addMarkers()`. I wanted each tree in the data set to be identified by a small pictoral representation of that tree. However, since there are 73 unique values in the `Common_Nam` column, (check with `cong %>% select(Common_Nam) %>% unique()`), this seemed a bit impracticle. The `identify_types()` function grouped these trees into the following categories.

```{r}
cong %>%
  group_by(type) %>%
  summarize(n = n()) %>%
  arrange(desc(n)) %>%
  kable()
```

So, I ended up finding 5 stock photos of trees on line to represent the 5 types of trees present. 

### Map

Now we are ready to map!

```{r}
leaflet(data = cong) %>% 
  addTiles() %>% 
  addMarkers(~lon,~lat, 
             icon = ~tree_icons[type],
             label = ~htmlEscape(paste("A",Height,"feet tall,",
                                       Circumfere,"in. thick",
                                       Common_Nam)))
```

## Other Visualizations

Below are two additional plots that summarize this data set nicely. 

```{r}
cong %>%
  filter(Height > 0 & Spread > 0 & Circumfere > 0) %>%
  group_by(Common_Nam) %>%
  summarize(n = n(),
            avg_ht = mean(Height)) %>%
  top_n(10,n) %>%
  ungroup() %>%
  ggplot(aes(x = reorder(Common_Nam,-n),
             y = avg_ht,
             size = n)) +
  geom_point() +
  theme(panel.background = element_rect(fill = "white"),
        text = element_text(family = "serif"),
        axis.text.x = element_text(angle = 35)) +
  xlab("Common Name") + 
  ylab("Average Height (ft.)") +
  ggtitle("Average Height of Top-10 Most Frequent Species") +
  labs(subtitle = "More than 10 are included because of ties")
```

It is astonishing that the average height of champion-caliber loblolly pines in the park is around 160 ft. 

```{r}
cong %>%
  filter(Height > 0 & Spread > 0 & Circumfere > 0) %>%
  ggplot(aes(x = Circumfere, y = Height, size = Spread,color = type)) +
  geom_point(alpha = 0.85) + 
  scale_color_brewer(palette = "Greens") +
  theme(panel.background = element_rect(fill = "white"),
        text = element_text(family = "serif")) +
  xlab("Circumference in inches") +
  ylab("Height in feet") +
  ggtitle("Height vs. Circumference of Congaree Big Trees") +
  labs(subtitle = "Points colored by tree type and sized by canopy spread (ft.)")
```

We can see a clear relationship between Height and Circumference, as expected, and can also recognize similarly clustered groups. 

## Concluding Remarks

I feel that the three vizualization techniques presented here adequately summarize the information contained in the big tree database. It is interesting to see clusters of tree types in both the map and the last figure.  