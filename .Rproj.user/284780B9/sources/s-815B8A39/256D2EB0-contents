#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(ggplot2)
library(normR)
library(tibble)

# Define UI for application that draws a histogram
ui <- fluidPage(
   
   # Application title
   titlePanel("Bayesian Normal Model Unknown Mean and Variance"),
   
   # Sidebar with a slider input for number of bins 
   sidebarLayout(
     sidebarPanel(
       numericInput("mu_0",
                    "prior mean",
                    min = NA,
                    max = NA,
                    value = 1.9),
       numericInput("kappa_0",
                    "prior sample size for mean",
                    min = 0,
                    max = NA,
                    value = 1),
       numericInput("sigsq_0",
                    "prior variance",
                    min = 0,
                    max = NA,
                    value = 0.010),
       numericInput("nu_0",
                    "prior sample size for variance",
                    min = 0,
                    max = NA,
                    value = 1),
       numericInput("n",
                    "new sample size",
                    min = 0,
                    max = NA,
                    value = 9),
       numericInput("y_bar",
                    "new sample mean",
                    min = NA,
                    max = NA,
                    value = 1.8044),
       numericInput("ssq",
                    "new sample variance",
                    min = 0,
                    max = NA,
                    value = 0.0168778)
     ),
      
      # Show a plot of the generated distribution
      mainPanel(
         plotOutput("distPlot1"),
         plotOutput("distPlot2"),
         plotOutput("distPlot3")
      )
   )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
   
   output$distPlot1 <- renderPlot({
     
     kappa_n <- input$kappa_0 + input$n
     nu_n <- input$nu_0 + input$n
     mu_n <- normR::mu_n(input$kappa_0,input$mu_0,input$n,input$y_bar)
     sigsq_n <- normR::sigsq_n(input$nu_0,input$sigsq_0,input$n,input$ssq,input$kappa_0,input$y_bar,input$mu_0)
     
     sigsq_posterior_draw <- draw_sigsq_posterior(10000,nu_n,sigsq_n)
     mu_posterior_draw <- draw_mu_posterior(mu_n,sigsq_posterior_draw,kappa_n)
     
     normR::plot_monte_sim(sigsq_posterior_draw,mu_posterior_draw)
   })
   
   output$distPlot2 <- renderPlot({
     
     kappa_n <- input$kappa_0 + input$n
     nu_n <- input$nu_0 + input$n
     mu_n <- normR::mu_n(input$kappa_0,input$mu_0,input$n,input$y_bar)
     sigsq_n <- normR::sigsq_n(input$nu_0,input$sigsq_0,input$n,input$ssq,input$kappa_0,input$y_bar,input$mu_0)
     
     sigsq_posterior_draw <- draw_sigsq_posterior(10000,nu_n,sigsq_n)
     mu_posterior_draw <- draw_mu_posterior(mu_n,sigsq_posterior_draw,kappa_n)
     
     normR::plot_posterior_density_estimate(sigsq_posterior_draw,
                                            plot_title = "Posterior density estimate of sigma")
   })
   
   output$distPlot3 <- renderPlot({
     
     kappa_n <- input$kappa_0 + input$n
     nu_n <- input$nu_0 + input$n
     mu_n <- normR::mu_n(input$kappa_0,input$mu_0,input$n,input$y_bar)
     sigsq_n <- normR::sigsq_n(input$nu_0,input$sigsq_0,input$n,input$ssq,input$kappa_0,input$y_bar,input$mu_0)
     
     sigsq_posterior_draw <- draw_sigsq_posterior(10000,nu_n,sigsq_n)
     mu_posterior_draw <- draw_mu_posterior(mu_n,sigsq_posterior_draw,kappa_n)
     
     normR::plot_posterior_density_estimate(mu_posterior_draw,
                                            plot_title = "Posterior density estimate of mu")
   })
}

# Run the application 
shinyApp(ui = ui, server = server)

